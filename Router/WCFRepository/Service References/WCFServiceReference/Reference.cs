//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34209
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFRepository.WCFServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFServiceReference.IRouterWCF")]
    public interface IRouterWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/UserName", ReplyAction="http://tempuri.org/IRouterWCF/UserNameResponse")]
        string UserName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/UserName", ReplyAction="http://tempuri.org/IRouterWCF/UserNameResponse")]
        System.Threading.Tasks.Task<string> UserNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/SuperDetailsElement", ReplyAction="http://tempuri.org/IRouterWCF/SuperDetailsElementResponse")]
        Data.SuperDetails SuperDetailsElement(int superId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/SuperDetailsElement", ReplyAction="http://tempuri.org/IRouterWCF/SuperDetailsElementResponse")]
        System.Threading.Tasks.Task<Data.SuperDetails> SuperDetailsElementAsync(int superId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/ManagerList", ReplyAction="http://tempuri.org/IRouterWCF/ManagerListResponse")]
        Data.Manager[] ManagerList(int superId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/ManagerList", ReplyAction="http://tempuri.org/IRouterWCF/ManagerListResponse")]
        System.Threading.Tasks.Task<Data.Manager[]> ManagerListAsync(int superId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/PlaceList", ReplyAction="http://tempuri.org/IRouterWCF/PlaceListResponse")]
        Data.Place[] PlaceList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/PlaceList", ReplyAction="http://tempuri.org/IRouterWCF/PlaceListResponse")]
        System.Threading.Tasks.Task<Data.Place[]> PlaceListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/WorkTypeList", ReplyAction="http://tempuri.org/IRouterWCF/WorkTypeListResponse")]
        Data.WorkType[] WorkTypeList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/WorkTypeList", ReplyAction="http://tempuri.org/IRouterWCF/WorkTypeListResponse")]
        System.Threading.Tasks.Task<Data.WorkType[]> WorkTypeListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/StateList", ReplyAction="http://tempuri.org/IRouterWCF/StateListResponse")]
        Data.State[] StateList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/StateList", ReplyAction="http://tempuri.org/IRouterWCF/StateListResponse")]
        System.Threading.Tasks.Task<Data.State[]> StateListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/AgreeTypeList", ReplyAction="http://tempuri.org/IRouterWCF/AgreeTypeListResponse")]
        Data.Agreement[] AgreeTypeList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/AgreeTypeList", ReplyAction="http://tempuri.org/IRouterWCF/AgreeTypeListResponse")]
        System.Threading.Tasks.Task<Data.Agreement[]> AgreeTypeListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/SuperList", ReplyAction="http://tempuri.org/IRouterWCF/SuperListResponse")]
        Data.Super[] SuperList(int place, int placeType, int workType, int state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/SuperList", ReplyAction="http://tempuri.org/IRouterWCF/SuperListResponse")]
        System.Threading.Tasks.Task<Data.Super[]> SuperListAsync(int place, int placeType, int workType, int state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/ManagerAdd", ReplyAction="http://tempuri.org/IRouterWCF/ManagerAddResponse")]
        void ManagerAdd(Data.Manager manager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/ManagerAdd", ReplyAction="http://tempuri.org/IRouterWCF/ManagerAddResponse")]
        System.Threading.Tasks.Task ManagerAddAsync(Data.Manager manager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/SuperDetailsAdd", ReplyAction="http://tempuri.org/IRouterWCF/SuperDetailsAddResponse")]
        void SuperDetailsAdd(Data.SuperDetails s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/SuperDetailsAdd", ReplyAction="http://tempuri.org/IRouterWCF/SuperDetailsAddResponse")]
        System.Threading.Tasks.Task SuperDetailsAddAsync(Data.SuperDetails s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/ManagerDelete", ReplyAction="http://tempuri.org/IRouterWCF/ManagerDeleteResponse")]
        void ManagerDelete(int managerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/ManagerDelete", ReplyAction="http://tempuri.org/IRouterWCF/ManagerDeleteResponse")]
        System.Threading.Tasks.Task ManagerDeleteAsync(int managerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/SuperDelete", ReplyAction="http://tempuri.org/IRouterWCF/SuperDeleteResponse")]
        void SuperDelete(int superId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/SuperDelete", ReplyAction="http://tempuri.org/IRouterWCF/SuperDeleteResponse")]
        System.Threading.Tasks.Task SuperDeleteAsync(int superId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/ManagerUpdate", ReplyAction="http://tempuri.org/IRouterWCF/ManagerUpdateResponse")]
        void ManagerUpdate(Data.Manager manager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/ManagerUpdate", ReplyAction="http://tempuri.org/IRouterWCF/ManagerUpdateResponse")]
        System.Threading.Tasks.Task ManagerUpdateAsync(Data.Manager manager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/SuperUpdate", ReplyAction="http://tempuri.org/IRouterWCF/SuperUpdateResponse")]
        void SuperUpdate(Data.SuperDetails super);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouterWCF/SuperUpdate", ReplyAction="http://tempuri.org/IRouterWCF/SuperUpdateResponse")]
        System.Threading.Tasks.Task SuperUpdateAsync(Data.SuperDetails super);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRouterWCFChannel : WCFRepository.WCFServiceReference.IRouterWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RouterWCFClient : System.ServiceModel.ClientBase<WCFRepository.WCFServiceReference.IRouterWCF>, WCFRepository.WCFServiceReference.IRouterWCF {
        
        public RouterWCFClient() {
        }
        
        public RouterWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RouterWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RouterWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RouterWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string UserName() {
            return base.Channel.UserName();
        }
        
        public System.Threading.Tasks.Task<string> UserNameAsync() {
            return base.Channel.UserNameAsync();
        }
        
        public Data.SuperDetails SuperDetailsElement(int superId) {
            return base.Channel.SuperDetailsElement(superId);
        }
        
        public System.Threading.Tasks.Task<Data.SuperDetails> SuperDetailsElementAsync(int superId) {
            return base.Channel.SuperDetailsElementAsync(superId);
        }
        
        public Data.Manager[] ManagerList(int superId) {
            return base.Channel.ManagerList(superId);
        }
        
        public System.Threading.Tasks.Task<Data.Manager[]> ManagerListAsync(int superId) {
            return base.Channel.ManagerListAsync(superId);
        }
        
        public Data.Place[] PlaceList() {
            return base.Channel.PlaceList();
        }
        
        public System.Threading.Tasks.Task<Data.Place[]> PlaceListAsync() {
            return base.Channel.PlaceListAsync();
        }
        
        public Data.WorkType[] WorkTypeList() {
            return base.Channel.WorkTypeList();
        }
        
        public System.Threading.Tasks.Task<Data.WorkType[]> WorkTypeListAsync() {
            return base.Channel.WorkTypeListAsync();
        }
        
        public Data.State[] StateList() {
            return base.Channel.StateList();
        }
        
        public System.Threading.Tasks.Task<Data.State[]> StateListAsync() {
            return base.Channel.StateListAsync();
        }
        
        public Data.Agreement[] AgreeTypeList() {
            return base.Channel.AgreeTypeList();
        }
        
        public System.Threading.Tasks.Task<Data.Agreement[]> AgreeTypeListAsync() {
            return base.Channel.AgreeTypeListAsync();
        }
        
        public Data.Super[] SuperList(int place, int placeType, int workType, int state) {
            return base.Channel.SuperList(place, placeType, workType, state);
        }
        
        public System.Threading.Tasks.Task<Data.Super[]> SuperListAsync(int place, int placeType, int workType, int state) {
            return base.Channel.SuperListAsync(place, placeType, workType, state);
        }
        
        public void ManagerAdd(Data.Manager manager) {
            base.Channel.ManagerAdd(manager);
        }
        
        public System.Threading.Tasks.Task ManagerAddAsync(Data.Manager manager) {
            return base.Channel.ManagerAddAsync(manager);
        }
        
        public void SuperDetailsAdd(Data.SuperDetails s) {
            base.Channel.SuperDetailsAdd(s);
        }
        
        public System.Threading.Tasks.Task SuperDetailsAddAsync(Data.SuperDetails s) {
            return base.Channel.SuperDetailsAddAsync(s);
        }
        
        public void ManagerDelete(int managerId) {
            base.Channel.ManagerDelete(managerId);
        }
        
        public System.Threading.Tasks.Task ManagerDeleteAsync(int managerId) {
            return base.Channel.ManagerDeleteAsync(managerId);
        }
        
        public void SuperDelete(int superId) {
            base.Channel.SuperDelete(superId);
        }
        
        public System.Threading.Tasks.Task SuperDeleteAsync(int superId) {
            return base.Channel.SuperDeleteAsync(superId);
        }
        
        public void ManagerUpdate(Data.Manager manager) {
            base.Channel.ManagerUpdate(manager);
        }
        
        public System.Threading.Tasks.Task ManagerUpdateAsync(Data.Manager manager) {
            return base.Channel.ManagerUpdateAsync(manager);
        }
        
        public void SuperUpdate(Data.SuperDetails super) {
            base.Channel.SuperUpdate(super);
        }
        
        public System.Threading.Tasks.Task SuperUpdateAsync(Data.SuperDetails super) {
            return base.Channel.SuperUpdateAsync(super);
        }
    }
}
